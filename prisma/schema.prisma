datasource db {
  provider = "sqlite" // 或者您使用的数据库
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Tenement {
  id                    Int               @id @default(autoincrement())
  tenement_address      String
  tenement_product_type String
  tenement_type         String
  tenement_face         String
  tenement_images       String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  owner                 Int
  is_deleted            Boolean           @default(false)
  Tenement_Market       Tenement_Market[]
  Tenement_Notice       Tenement_Notice[]
  User                  User              @relation(fields: [owner], references: [user_id])
  Tenement_Create       Tenement_Create[]
}

model Tenement_Market {
  tenement_id                      Int      @id
  tenement_host_name               String
  tenement_host_telphone           String
  tenement_host_phone              String
  tenement_host_line               String
  tenement_host_remittance_bank    String
  tenement_host_remittance_account String
  tenement_host_address            String
  tenement_host_birthday           String
  tenement_host_hobby              String
  tenement_host_remark             String
  tenement_area_max                String
  tenement_area_min                String
  burget_rent_max                  String
  burget_rent_min                  String
  hopefloor_max                    String
  hopefloor_min                    String
  market_state                     String
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  Tenement                         Tenement @relation(fields: [tenement_id], references: [id])
}

model Tenement_Rent {
  tenement_id            Int             @id
  is_deleted             Boolean         @default(false)
  tenement_status        String
  renter_start_date      String
  renter_end_date        String
  renter_name            String
  renter_id_images       String
  renter_phone           String
  renter_jobtitle        String
  renter_guarantor_name  String
  renter_guarantor_phone String
  renter_remark          String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  Tenement_Create        Tenement_Create @relation(fields: [tenement_id], references: [tenement_id])
}

model Tenement_Develop {
  tenement_id     Int             @id
  is_deleted      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Tenement_Create Tenement_Create @relation(fields: [tenement_id], references: [tenement_id])
}

model Tenement_Sell {
  tenement_id        Int             @id
  buyer_order_date   String
  buyer_handout_date String
  buyer_name         String
  buyer_id_images    String
  buyer_phone        String
  buyer_jobtitle     String
  buyer_remark       String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Tenement_Create    Tenement_Create @relation(fields: [tenement_id], references: [tenement_id])
}

model Tenement_Create {
  tenement_id                      Int                @id
  total_rating                     String
  main_building                    String
  affiliated_building              String
  public_buliding                  String
  unregistered_area                String
  management_magnification         String
  management_fee                   String
  tenement_floor                   String
  tenement_host_name               String
  tenement_host_telphone           String
  tenement_host_phone              String
  tenement_host_line               String
  tenement_host_remittance_bank    String
  tenement_host_remittance_account String
  tenement_host_address            String
  tenement_host_birthday           String
  tenement_host_hobby              String
  tenement_host_remark             String
  selling_price                    String
  rent_price                       String
  deposit_price                    String
  createdAt                        DateTime           @default(now())
  updatedAt                        DateTime           @updatedAt
  Tenement                         Tenement           @relation(fields: [tenement_id], references: [id])
  Tenement_Rent                    Tenement_Rent[]
  Tenement_Develop                 Tenement_Develop[]
  Tenement_Sell                    Tenement_Sell[]
}

model Collection {
  id                     Int                 @id @default(autoincrement())
  tenement_no            String
  collection_name        String
  collection_type        String
  price                  String
  payment                String
  collection_remark      String
  collection_date        String
  remittance_bank        String
  remittance_account     String
  cus_remittance_account String
  cus_remittance_bank    String
  collection_complete    String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  owner                  Int
  is_deleted             Boolean
  User                   User                @relation(fields: [owner], references: [user_id])
  Collection_Notice      Collection_Notice[]
}

model Collection_Notice {
  id            Int        @id @default(autoincrement())
  collection_id Int
  visitDate     String
  record        String
  remindDate    String
  remind        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Collection    Collection @relation(fields: [collection_id], references: [id])
}

model Tenement_Notice {
  id          Int      @id @default(autoincrement())
  tenement_id Int
  visitDate   String
  record      String
  remindDate  String
  remind      String
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       Int
  Tenement    Tenement @relation(fields: [tenement_id], references: [id])
  User        User     @relation(fields: [owner], references: [user_id])
}

model User {
  user_id          Int               @id @default(autoincrement())
  user_name        String
  user_email       String            @unique
  user_password    String
  isAdmin          Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  status           Boolean
  Tenements        Tenement[]
  Collections      Collection[]
  Tenement_Notices Tenement_Notice[]
}
